/* 
Convert table to responsive cards
by @kushalcodes 
*/
let TABLE_KONVERTER = { referenceTableIdOrClassName: "", referenceTableParentEl: null, isReferenceIdOrClass: function () { return "#" === this.referenceTableIdOrClassName.substring(0, 1) ? "id" : "." === this.referenceTableIdOrClassName.substring(0, 1) && "class" }, konvert: function () { this.hideTable(); const e = this.isReferenceIdOrClass(); e ? ("id" === e && this.handleId(), "class" === e && this.handleClass()) : console.error("Invalid id or class name provided to run table konverter!"), TABLE_KONVERTER.handleWindowWidthChange(window.innerWidth), window.addEventListener("resize", function (e) { TABLE_KONVERTER.handleWindowWidthChange(e.target.innerWidth) }) }, tableHeadingTitles: [], tableBodyTRs: [], tableCard: [], handleId: function () { const e = this.referenceTableIdOrClassName.substring(1), t = document.getElementById(e); this.referenceTableParentEl = t.parentElement; const n = t.getElementsByTagName("thead")[0], s = t.getElementsByTagName("tbody")[0], a = n.getElementsByTagName("th"); for (let e = 0; e < a.length; e++) { const t = a[e]; this.tableHeadingTitles.push(t.innerText) } const l = s.getElementsByTagName("tr"); this.tableBodyTRs = l, this.generateTableCard(), this.generateCardElement() }, handleClass: function () { const e = this.referenceTableIdOrClassName.substring(1), t = document.getElementsByClassName(e); for (let e = 0; e < t.length; e++) { const n = t[e]; if (n.id && n.id.length > 0) { console.error(`Id already exists for table: <table class='${n.className}'></table> \n        \n You are using css initialization\n        \n We basically convert table elements initialization with cssm to have generated ids and use that id to convert using the id.\n        \n Hence its basically id initialization\n        `); break } const s = "konverted-table-" + e; n.id = s, TABLE_KONVERTER.init("#" + s, TABLE_KONVERTER.options) } }, generateTableCard: function () { for (let e = 0; e < this.tableBodyTRs.length; e++) { const t = this.tableBodyTRs[e].getElementsByTagName("td"); let n = {}; for (let e = 0; e < t.length; e++) { const s = t[e]; n[this.tableHeadingTitles[e].replace(" ", "_")] = s.innerHTML } this.tableCard.push(n) } }, insertAfter: function (e, t) { e.parentNode.insertBefore(t, e.nextSibling) }, generateCardElement: function () { for (let e = 0; e < this.tableCard.length; e++) { const t = this.tableCard[e], n = this.generateCardSingle(t); this.referenceTableParentEl && this.insertAfter(this.referenceTableParentEl, n) } }, generateCardSingle: function (e) { let t = document.createElement("div"); t.className = "card table-card", t.style.width = "100%", t.style.margin = "0 auto", t.style.marginBottom = "5px", t.style.marginTop = "5px"; for (const n in e) if (Object.hasOwnProperty.call(e, n)) { const s = e[n]; let a = "string" == typeof n ? this.capitalize(n).replace("_", " ") : n, l = document.createElement("div"); l.className = "card-body", this.options.stickyHeader && this.options.stickyHeader.tableHeadingName && a.toLowerCase() === this.options.stickyHeader.tableHeadingName.toLowerCase() && (l.className = "card-body card-sticky", l.style.position = "sticky", l.style.top = 0), l.innerHTML += "<h5 class='card-title'>" + a + "</h5>", l.innerHTML += "<div class='card-text'>" + s + "</div>", t.appendChild(l) } return t }, capitalize: function (e) { return 0 === e.length ? "" : e[0].toUpperCase() + e.slice(1) }, hideTable: function () { const e = this.isReferenceIdOrClass(); if (e) { const t = this.referenceTableIdOrClassName.substring(1); if ("id" === e && (document.getElementById(t).style.display = "none"), "class" === e) { const e = document.getElementsByClassName(t); for (let t = 0; t < e.length; t++)e[t].style.display = "none" } const n = document.getElementsByClassName("table-card"); for (let e = 0; e < n.length; e++)n[e].style.display = "block" } }, showTable: function () { const e = this.isReferenceIdOrClass(); if (e) { const t = this.referenceTableIdOrClassName.substring(1); if ("id" === e && (document.getElementById(t).style.display = "table"), "class" === e) { const e = document.getElementsByClassName(t); for (let t = 0; t < e.length; t++)e[t].style.display = "table" } const n = document.getElementsByClassName("table-card"); for (let e = 0; e < n.length; e++)n[e].style.display = "none" } }, handleWindowWidthChange: function (e) { e <= 425 ? this.hideTable() : this.showTable() }, alreadyLoadedStyle: "", stylingMap: { buddha: "buddha.css", simple: "simple.css", casual: "casual.css" }, loadStyling: function (e) { if (this.alreadyLoadedStyle === e) return; let t = !1, n = ""; for (const s in this.stylingMap) if (Object.hasOwnProperty.call(this.stylingMap, s) && s === e) { n = this.stylingMap[s], t = !0; break } if (!t) return console.warn("Invalid styling name. Following are valid stylings : "), void console.table(this.stylingMap); document.head.innerHTML += `<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/kushalcodes/konvert-table-to-card@main/styling/${n}'/>`, this.alreadyLoadedStyle = e }, typePrefix: "type.", typeMap: { autoAlign: "auto-align.css" }, alreadyLoadedStyleType: "", loadStylingType: function (e) { if (this.alreadyLoadedStyleType === e) return; let t = !1, n = ""; for (const s in this.typeMap) if (Object.hasOwnProperty.call(this.typeMap, s) && s === e) { n = this.typePrefix + this.typeMap[s], t = !0; break } if (!t) return console.warn("Invalid styling type. Following are valid stylings : "), void console.table(this.typeMap); document.head.innerHTML += `<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/kushalcodes/konvert-table-to-card@main/styling/${n}'/>`, this.alreadyLoadedStyleType = e }, options: {}, init: function (e, t) { t && (this.options = t), t && t.type && this.loadStylingType(t.type), t && t.style && this.loadStyling(t.style), this.referenceTableIdOrClassName = e, this.konvert() } };